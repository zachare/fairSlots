@page "/funds"
@inject HttpClient _httpClient
@inject IPlayerService PlayerService
@using fairSlots.Shared

<Animation AnimationSelected="@selectedAnimation">
<PageTitle>Add Funds</PageTitle>
<h2 style="color:white">Add Funds</h2>
<EditForm Model="fund" OnSubmit="HandleSubmit">
    <div>
        <label style="color:white">Player</label><br />
        <InputSelect @bind-Value="fund.PlayerID" class="form-select">
            @foreach (var player in PlayerService.Players)
            {
                <option value="@player.PlayerID">@player.Username</option>
            }
        </InputSelect>
    </div>
    <div class="visually-hidden">
        <label style="color:white" for="funds">Funds</label>
        <InputNumber id="funds" @bind-Value="fund.Funds" class="form-control"></InputNumber>
        <label style="color:white" for="winrate">Win Rate</label>
        <InputNumber id="winrate" @bind-Value="fund.WinRate" class="form-control"></InputNumber>
        <label style="color:white" for="username">Username</label>
        <InputText id="username" @bind-Value="fund.Username" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Add $100</button>
</EditForm>
</Animation>

@code {

    public string selectedAnimation = "";
    Player fund = new Player();

    protected override async Task OnInitializedAsync()
    {
        fund = PlayerService.Players[0];
        fund.PlayerID = fund.PlayerID;
        selectedAnimation = Animations.slideDown;
        await PlayerService.GetPlayers();
    }


    async Task HandleSubmit()
    {
        fund = PlayerService.Players.Single(p => p.PlayerID == fund.PlayerID);
        fund.Funds = fund.Funds + 100;
        await PlayerService.UpdatePlayer(fund);
    }

}
