@* Page for the creation or modification of a Player object, passes in ID via URL if given *@
@page "/player"
@page "/player/{id:int}"
@inject IPlayerService PlayerService
@inject IChanceService ChanceService
@* Only to be accessed by Manager and Admin roles *@
@attribute [Authorize(Roles = "Manager, Admin")]
@using Microsoft.AspNetCore.Authorization;

<Animation AnimationSelected="@selectedAnimation">
@if (ID == null)
{
    <PageTitle>Create Player</PageTitle>
    <h1 style="color:white">Create A New Player</h1>
}
else
{
    <PageTitle>Edit @player.Username</PageTitle>
    <h3 style="color:white">Edit @player.Username</h3>
}

<EditForm Model="player" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <div>
        <label style="color:white" for="username">Username</label>
        <InputText id="username" @bind-Value="player.Username" class="form-control"></InputText>
        @* Provides an error message is the Username is not valid*@
        <ValidationMessage For="() => player.Username"/>
    </div>
    <div>
        <label style="color:white" for="funds">Funds</label>
        <InputNumber id="funds" @bind-Value="player.Funds" class="form-control"></InputNumber>
    </div>
    <br/>
    @if (ID != null)
    {
        <button type="submit" class="btn btn-primary">@btnText</button>
        <button type="button" class="btn btn-danger" @onclick="DeletePlayer">Delete Player</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary">@btnText</button>
    }
</EditForm>
</Animation>

@code {
    [Parameter]
    public int? ID { get; set; }

    public string selectedAnimation = "";

    string btnText = string.Empty;

    Player player = new Player();
    Chance chance = new Chance();

    protected override async Task OnInitializedAsync()
    {
        selectedAnimation = Animations.slideDown;
        btnText = ID == null ? "Save New Player" : "Update Player";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ID == null)
        {

        }
        else
        {
            player = await PlayerService.GetSinglePlayer((int)ID);
        }
    }

    async Task HandleSubmit()
    {
        // In the case that a new Player is created, a corresponding Chance object is also created
        // Uses default WinRate of 0.50 and current time as UpdateTime
        if (ID == null)
        {
            chance.PlayerID = player.PlayerID;
            chance.WinRate = 0.50m;
            chance.UpdateTime = DateTime.Now;
            await ChanceService.CreateChance(chance);
            await PlayerService.CreatePlayer(player);
        }
        else
        {
            await PlayerService.UpdatePlayer(player);
        }
    }

    // Deletes a Player's Chance object upon the Player's deletion
    async Task DeletePlayer()
    {
        await ChanceService.DeleteChance(player.PlayerID);
        await PlayerService.DeletePlayer(player.PlayerID);
    }
}

